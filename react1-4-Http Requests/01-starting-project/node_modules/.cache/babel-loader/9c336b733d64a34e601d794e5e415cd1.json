{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\012963631\\\\Documents\\\\Front End\\\\React\\\\react1-4\\\\01-starting-project\\\\src\\\\App.js\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // function fetchMoviesHandler() {\n  //   // dentro do fetch passar o url que vc quer enviar a request, por padrão as solicitações são get\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json(); //transformando o arquivo\n  //     })\n  //     .then((data) => {\n  //       //results é um objeto dentro do arquivo\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.releaseDate,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n  // Fazer de forma assíncrona\n  // async function fetchMoviesHandler() {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   // Ver tratativa de erros\n  //   try {\n  //     const response = await fetch(\"https://swapi.dev/api/films\");\n  //     // Mensagem aparecerá caso tiver algum erro\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong!\");\n  //     }\n  //     const data = await response.json();\n  //     //results é um objeto dentro do arquivo\n  //     const transformedMovies = data.results.map((movieData) => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.releaseDate,\n  //       };\n  //     });\n  //     setMovies(transformedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null); // Ver tratativa de erros\n\n    try {\n      // dentro do fetch passar o url que vc quer enviar a request, por padrão as solicitações são get\n      const response = await fetch(\"https://react-http-ca788-default-rtdb.firebaseio.com/movies.json\"); // Mensagem aparecerá caso tiver algum erro\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  });\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\"https://react-http-ca788-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      //Convertendo a variável para formato json(útil para fazer a comunicação do back com o front)\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/012963631/Documents/Front End/React/react1-4/01-starting-project/src/App.js"],"names":["React","useCallback","useEffect","useState","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // function fetchMoviesHandler() {\n  //   // dentro do fetch passar o url que vc quer enviar a request, por padrão as solicitações são get\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json(); //transformando o arquivo\n  //     })\n  //     .then((data) => {\n  //       //results é um objeto dentro do arquivo\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.releaseDate,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n\n  // Fazer de forma assíncrona\n  // async function fetchMoviesHandler() {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   // Ver tratativa de erros\n  //   try {\n  //     const response = await fetch(\"https://swapi.dev/api/films\");\n  //     // Mensagem aparecerá caso tiver algum erro\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong!\");\n  //     }\n  //     const data = await response.json();\n\n  //     //results é um objeto dentro do arquivo\n  //     const transformedMovies = data.results.map((movieData) => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.releaseDate,\n  //       };\n  //     });\n  //     setMovies(transformedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    // Ver tratativa de erros\n    try {\n      // dentro do fetch passar o url que vc quer enviar a request, por padrão as solicitações são get\n      const response = await fetch(\n        \"https://react-http-ca788-default-rtdb.firebaseio.com/movies.json\"\n      );\n      // Mensagem aparecerá caso tiver algum erro\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const data = await response.json();\n\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate,\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  });\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch(\n      \"https://react-http-ca788-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie), //Convertendo a variável para formato json(útil para fazer a comunicação do back com o front)\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}