{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\012963631\\\\Documents\\\\Front End\\\\React\\\\react1-4\\\\01-starting-project\\\\src\\\\App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); // function fetchMoviesHandler() {\n  //   // dentro do fetch passar o url que vc quer enviar a request, por padrão as solicitações são get\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json(); //transformando o arquivo\n  //     })\n  //     .then((data) => {\n  //       //results é um objeto dentro do arquivo\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.releaseDate,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n  // Fazer de forma assíncrona\n  // async function fetchMoviesHandler() {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   // Ver tratativa de erros\n  //   try {\n  //     const response = await fetch(\"https://swapi.dev/api/films\");\n  //     // Mensagem aparecerá caso tiver algum erro\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong!\");\n  //     }\n  //     const data = await response.json();\n  //     //results é um objeto dentro do arquivo\n  //     const transformedMovies = data.results.map((movieData) => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.releaseDate,\n  //       };\n  //     });\n  //     setMovies(transformedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null); // Ver tratativa de erros\n\n    try {\n      // dentro do fetch passar o url que vc quer enviar a request, por padrão as solicitações são get\n      const response = await fetch(\"https://swapi.dev/api/films\"); // Mensagem aparecerá caso tiver algum erro\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json(); //results é um objeto dentro do arquivo\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.releaseDate\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/012963631/Documents/Front End/React/react1-4/01-starting-project/src/App.js"],"names":["React","useEffect","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","message","content","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // function fetchMoviesHandler() {\n  //   // dentro do fetch passar o url que vc quer enviar a request, por padrão as solicitações são get\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json(); //transformando o arquivo\n  //     })\n  //     .then((data) => {\n  //       //results é um objeto dentro do arquivo\n  //       const transformedMovies = data.results.map((movieData) => {\n  //         return {\n  //           id: movieData.episode_id,\n  //           title: movieData.title,\n  //           openingText: movieData.opening_crawl,\n  //           releaseDate: movieData.releaseDate,\n  //         };\n  //       });\n  //       setMovies(transformedMovies);\n  //     });\n  // }\n\n  // Fazer de forma assíncrona\n  // async function fetchMoviesHandler() {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   // Ver tratativa de erros\n  //   try {\n  //     const response = await fetch(\"https://swapi.dev/api/films\");\n  //     // Mensagem aparecerá caso tiver algum erro\n  //     if (!response.ok) {\n  //       throw new Error(\"Something went wrong!\");\n  //     }\n  //     const data = await response.json();\n\n  //     //results é um objeto dentro do arquivo\n  //     const transformedMovies = data.results.map((movieData) => {\n  //       return {\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.releaseDate,\n  //       };\n  //     });\n  //     setMovies(transformedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    // Ver tratativa de erros\n    try {\n      // dentro do fetch passar o url que vc quer enviar a request, por padrão as solicitações são get\n      const response = await fetch(\"https://swapi.dev/api/films\");\n      // Mensagem aparecerá caso tiver algum erro\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const data = await response.json();\n\n      //results é um objeto dentro do arquivo\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.releaseDate,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}